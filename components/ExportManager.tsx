"use client"

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { cn } from '@/lib/utils'

interface ExportData {
  url: string
  timestamp: string
  scores: Record<string, number>
  recommendations: string[]
  quickWins?: Array<{
    action: string
    impact: string
    effort: string
  }>
  details?: Record<string, any>
}

interface ExportManagerProps {
  data: ExportData
  className?: string
}

export default function ExportManager({ data, className }: ExportManagerProps) {
  const [isExporting, setIsExporting] = useState(false)
  const [exportType, setExportType] = useState<'pdf' | 'csv' | 'json' | null>(null)

  const generatePDFReport = async () => {
    setIsExporting(true)
    setExportType('pdf')
    
    try {
      // Create a comprehensive HTML report
      const reportHTML = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Aelora AI Visibility Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
            .header { text-align: center; margin-bottom: 40px; border-bottom: 2px solid #e5e7eb; padding-bottom: 20px; }
            .logo { font-size: 24px; font-weight: bold; color: #3b82f6; margin-bottom: 10px; }
            .url { font-size: 18px; color: #6b7280; }
            .timestamp { font-size: 14px; color: #9ca3af; }
            .section { margin: 30px 0; }
            .section-title { font-size: 20px; font-weight: bold; margin-bottom: 15px; color: #1f2937; border-left: 4px solid #3b82f6; padding-left: 15px; }
            .score-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
            .score-card { border: 1px solid #e5e7eb; border-radius: 8px; padding: 20px; text-align: center; }
            .score-value { font-size: 36px; font-weight: bold; margin-bottom: 5px; }
            .score-label { font-size: 14px; color: #6b7280; }
            .score-excellent { color: #10b981; }
            .score-good { color: #22c55e; }
            .score-fair { color: #f59e0b; }
            .score-poor { color: #ef4444; }
            .recommendations { list-style: none; padding: 0; }
            .recommendation { background: #f9fafb; border-left: 4px solid #3b82f6; padding: 15px; margin: 10px 0; border-radius: 0 8px 8px 0; }
            .quick-wins { background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); border-radius: 8px; padding: 20px; margin: 20px 0; }
            .quick-win { background: white; border-radius: 6px; padding: 12px; margin: 8px 0; border-left: 4px solid #10b981; }
            .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #9ca3af; border-top: 1px solid #e5e7eb; padding-top: 20px; }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo">üîç Aelora AI Visibility Report</div>
            <div class="url">${data.url}</div>
            <div class="timestamp">Generated on ${new Date(data.timestamp).toLocaleDateString()}</div>
          </div>

          <div class="section">
            <div class="section-title">üìä Performance Scores</div>
            <div class="score-grid">
              ${Object.entries(data.scores).map(([key, value]) => {
                const scoreClass = value >= 90 ? 'score-excellent' : value >= 70 ? 'score-good' : value >= 50 ? 'score-fair' : 'score-poor'
                const label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())
                return `
                  <div class="score-card">
                    <div class="score-value ${scoreClass}">${value}</div>
                    <div class="score-label">${label}</div>
                  </div>
                `
              }).join('')}
            </div>
          </div>

          ${data.quickWins && data.quickWins.length > 0 ? `
            <div class="section">
              <div class="section-title">üöÄ Quick Wins</div>
              <div class="quick-wins">
                ${data.quickWins.map(win => `
                  <div class="quick-win">
                    <strong>${win.action}</strong><br>
                    <small>Impact: ${win.impact} ‚Ä¢ Effort: ${win.effort}</small>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : ''}

          <div class="section">
            <div class="section-title">üí° Recommendations</div>
            <ul class="recommendations">
              ${data.recommendations.map(rec => `
                <li class="recommendation">${rec}</li>
              `).join('')}
            </ul>
          </div>

          <div class="footer">
            <p>This report was generated by Aelora - AI Visibility Optimization Tool</p>
            <p>Visit aelora.com to analyze more websites and improve your AI search visibility</p>
          </div>
        </body>
        </html>
      `

      // Create and download the HTML file (in a real app, you'd use a PDF library)
      const blob = new Blob([reportHTML], { type: 'text/html' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `aelora-report-${new Date().toISOString().split('T')[0]}.html`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)

    } catch (error) {
      console.error('Error generating PDF:', error)
    } finally {
      setIsExporting(false)
      setExportType(null)
    }
  }

  const exportCSV = async () => {
    setIsExporting(true)
    setExportType('csv')

    try {
      const csvData = [
        ['Metric', 'Score', 'Status'],
        ...Object.entries(data.scores).map(([key, value]) => [
          key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()),
          value.toString(),
          value >= 70 ? 'Good' : value >= 50 ? 'Fair' : 'Needs Improvement'
        ]),
        [],
        ['Recommendations'],
        ...data.recommendations.map(rec => [rec])
      ]

      const csvContent = csvData.map(row => 
        row.map(cell => `"${cell}"`).join(',')
      ).join('\n')

      const blob = new Blob([csvContent], { type: 'text/csv' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `aelora-data-${new Date().toISOString().split('T')[0]}.csv`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)

    } catch (error) {
      console.error('Error exporting CSV:', error)
    } finally {
      setIsExporting(false)
      setExportType(null)
    }
  }

  const exportJSON = async () => {
    setIsExporting(true)
    setExportType('json')

    try {
      const jsonData = {
        ...data,
        exportedAt: new Date().toISOString(),
        version: '1.0'
      }

      const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `aelora-analysis-${new Date().toISOString().split('T')[0]}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)

    } catch (error) {
      console.error('Error exporting JSON:', error)
    } finally {
      setIsExporting(false)
      setExportType(null)
    }
  }

  const shareResults = async () => {
    const shareText = `üîç Just analyzed my website with Aelora AI Visibility Tool!\n\nüìä Overall Score: ${data.scores.overallScore}/100\n\nüöÄ Key improvements identified:\n${data.recommendations.slice(0, 3).map(rec => `‚Ä¢ ${rec}`).join('\n')}\n\n#AEO #AIOptimization #SEO`

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Aelora AI Visibility Analysis',
          text: shareText,
          url: window.location.href
        })
      } catch (error) {
        console.log('Error sharing:', error)
        copyToClipboard(shareText)
      }
    } else {
      copyToClipboard(shareText)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      // You could show a toast notification here
      console.log('Copied to clipboard')
    })
  }

  return (
    <div className={cn("space-y-4", className)}>
      <div className="flex flex-col sm:flex-row gap-3">
        <Button
          onClick={generatePDFReport}
          disabled={isExporting}
          variant="default"
          className="flex-1"
        >
          {isExporting && exportType === 'pdf' ? (
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              Generating...
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Export PDF Report
            </div>
          )}
        </Button>

        <Button
          onClick={exportCSV}
          disabled={isExporting}
          variant="outline"
          className="flex-1"
        >
          {isExporting && exportType === 'csv' ? (
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
              Exporting...
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Export CSV Data
            </div>
          )}
        </Button>

        <Button
          onClick={exportJSON}
          disabled={isExporting}
          variant="outline"
          className="flex-1"
        >
          {isExporting && exportType === 'json' ? (
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
              Exporting...
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v14a2 2 0 002 2z" />
              </svg>
              Export JSON
            </div>
          )}
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button
          onClick={shareResults}
          variant="secondary"
          className="flex-1"
        >
          <div className="flex items-center gap-2">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
            </svg>
            Share Results
          </div>
        </Button>

        <Button
          onClick={() => window.print()}
          variant="ghost"
          className="flex-1"
        >
          <div className="flex items-center gap-2">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
            </svg>
            Print Report
          </div>
        </Button>
      </div>

      {/* Export Tips */}
      <div className="text-xs text-muted-foreground bg-muted/50 p-3 rounded-lg">
        <p className="font-medium mb-1">üí° Export Tips:</p>
        <ul className="space-y-1">
          <li>‚Ä¢ <strong>PDF Report:</strong> Perfect for presentations and stakeholder sharing</li>
          <li>‚Ä¢ <strong>CSV Data:</strong> Import into Excel or Google Sheets for further analysis</li>
          <li>‚Ä¢ <strong>JSON:</strong> Raw data for developers and integrations</li>
          <li>‚Ä¢ <strong>Share:</strong> Quick social media sharing with key insights</li>
        </ul>
      </div>
    </div>
  )
} 